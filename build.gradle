group 'com.lion'
version = '1.0.0'

buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
        generatorPluginVersion = '1.4'
        dockerVersion = '1.2'
    }
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:${generatorPluginVersion}"
        classpath "se.transmode.gradle:gradle-docker:${dockerVersion}"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    idea {
        module {
            inheritOutputDirs = true
        }
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "com.arenagod.gradle.MybatisGenerator"    // 引入 mybatis-generator 插件
    apply plugin: 'docker'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            scala {
                srcDirs = ['src/main/scala']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java']
            }
            scala {
                srcDirs = ['src/test/scala']
            }
        }
    }

    ext {
        springBootAdminVersion = '2.1.2'
        springCloudVersion = 'Greenwich.RELEASE'
        springFrameworkVersion = '5.1.4.RELEASE'

        nacosVersion = '0.9.0.RELEASE'
        scalaVersion = '2.11.12'
        lombokVersion = '1.18.6'
        jacksonVersion = '2.9.8'
        swaggerVersion = '2.9.2'
        mysqlVersion = '8.0.13'
        druidVersion = '1.1.16'
        mybatisVersion = '3.4.6'
        mybatisSpringVersion = '1.3.2'
        generatorVersion = '1.3.7'
        pagehelperVersion = '1.2.10'
        hadoopVersion = '3.1.1'
        sparkVersion = '2.4.0'

    }

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    configurations {

        mybatisGenerator    // 添加 mybatis-generator 插件

        // 排除 tomcat 依赖（使用 undertow）
        implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        // 排除 logback 依赖（使用 log4j2）
        implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    dependencies {
        implementation "org.scala-lang:scala-library:${scalaVersion}"

        implementation 'org.springframework.boot:spring-boot-starter-undertow'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'  // 添加 yml 依赖（用于识别 log4j2.yml 文件）

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    //  添加 mybatis-generator 插件
    mybatisGenerator {
        verbose = true
        overwrite = true
        configFile = 'src/main/resources/generatorConfig.xml'
    }

    // 添加docker插件task
    task buildDocker(type: Docker, dependsOn: build) {
        //applicationName = applicationName
        tagVersion = version
        dockerfile = file('src/main/docker/Dockerfile')
        doFirst {
            copy {
                from jar
                into stageDir
            }
        }
    }

    // 添加jacoco测试覆盖率
    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true

            xml.destination file("${buildDir}/reports/jacoco/jacocoReport/jacocoXml.xml")
            csv.destination file("${buildDir}/reports/jacoco/jacocoReport/jacocoCsv.csv")
            html.destination file("${buildDir}/reports/jacoco/jacocoReport/jacocoHtml")
        }
    }
    tasks.check.dependsOn jacocoTestReport

    // clean 命令时删除 out 目录
    task cleanOutDir(type: Delete) {
        delete "${projectDir}/out"
        delete "${rootDir}/out"
    }
    tasks.clean.dependsOn(cleanOutDir)

}